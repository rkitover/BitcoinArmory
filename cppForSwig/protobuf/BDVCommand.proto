syntax = "proto2";

import "LedgerEntry.proto";
import "NodeStatus.proto";
import "CommonTypes.proto";

package Codec_BDVCommand;

enum StaticMethods
{
	registerBDV = 1;
	unregisterBDV = 2;
	shutdown = 3;
	shutdownNode = 4;
}

enum Methods
{
	waitOnBDVInit = 5;
	waitOnBDVNotification = 6;
	
	goOnline = 10;
	registerWallet = 11;
	registerLockbox = 12;

	getTopBlockHeight = 20;
	getHeaderByHeight = 21;
	getHeaderByHash = 22;

	getHistoryPage = 30;
	getHistoryForWalletSelection = 31;
	createAddressBook = 32;

	getLedgerDelegateForWallets = 40;
	getLedgerDelegateForLockboxes = 41;
	getLedgerDelegateForScrAddr = 42;
	updateWalletsLedgerFilter = 43;
	getPageCountForLedgerDelegate = 44;

	getBalancesAndCount = 50;
	getAddrTxnCounts = 51;
	getAddrBalances = 52;
	getAddressFullBalance = 53;
	getAddressTxioCount = 54;

	getSpendableTxOutListForValue = 60;
	getSpendableZCList = 61;
	getRBFTxOutList = 62;
	getSpendableTxOutListForAddr = 63;
	getUTXOsForAddrList = 64;

	broadcastZC = 70;
	broadcastThroughRPC = 71;

	getTxByHash = 80;

	getNodeStatus = 90;
	estimateFee = 91;
	getFeeSchedule = 92;
}

message StaticCommand
{
	required StaticMethods method = 1;
	optional bytes cookie = 2;
	optional bytes magicWord = 3;
}

message BDVCommand
{
	required Methods method = 1;
	optional string bdvId = 2;

	optional string walletId = 3;
	optional string delegateId = 4;
	optional bytes hash = 5;
	optional bytes scrAddr = 6;

	optional uint64 value = 7;
	optional uint32 height = 8;
	optional uint32 pageID = 9;
	optional bool flag = 10;
	
	repeated bytes binData = 11;
}

enum NotificationType
{
	terminate = 0;
	continue_polling = 1;
	ready = 2;
	newblock = 3;
	zc = 4;
	error = 5;

	progress = 20;
	nodestatus = 21;
	refresh = 22;
}

message Notification
{
	required NotificationType type = 1;
	oneof payload
	{
		uint32 height = 2;
		Codec_NodeStatus.ProgressData progress = 3;
		Codec_NodeStatus.NodeStatus nodeStatus = 4;
		Codec_NodeStatus.BDV_Error error = 5;
		Codec_LedgerEntry.ManyLedgerEntry ledgers = 6;
		Codec_CommonTypes.ManyBinaryData ids = 7;
		Codec_NodeStatus.Refresh refresh = 8;
	}
}

message BDVCallback
{
	repeated Notification notification = 1;
}
